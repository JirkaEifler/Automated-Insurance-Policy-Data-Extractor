import os
import re
import fitz
import pandas as pd
import time
from watchdog.observers import Observer
from watchdog.events import FileSystemEventHandler

WATCH_FOLDER = "/Users/jirieifler/POJISTOVNY/PDFka"
CSV_PATH = "/Users/jirieifler/POJISTOVNY/EVIDENCE_UDAJE_AUTA.csv"
SORTED_FOLDER = "/Users/jirieifler/POJISTOVNY/ZPRACOVANE"
ERROR_FOLDER = "/Users/jirieifler/POJISTOVNY/CHYBY"

def extract_common_fields():
    return {
        "Jm√©no a p≈ô√≠jmen√≠": "", "Rodn√© ƒç√≠slo": "", "Datum narozen√≠": "", "Adresa": "", "ƒå√≠slo smlouvy": "",
        "SPZ": "", "Cena vozidla": "", "Najet√© km": "", "Roƒçn√≠ n√°jezd": "", "Poƒç√°tek poji≈°tƒõn√≠": "", "Cena": "",
        "Kryt√≠ PR": "", "Havarijn√≠ poji≈°tƒõn√≠": "", "Dal≈°√≠ p≈ôipoji≈°tƒõn√≠": "", "Telefon": "", "E-mail": "",
        "Pojistn√≠k - Typ osoby": "", "Pojistn√≠k - Pl√°tce DPH": "", "Shodn√Ω provozovatel": "", "Shodn√Ω vlastn√≠k": "",
        "Provozovatel - N√°zev": "", "Provozovatel - IƒåO": "", "Provozovatel - Adresa": "",
        "Provozovatel - Typ osoby": "", "Provozovatel - Pl√°tce DPH": "",
        "Vlastn√≠k - N√°zev": "", "Vlastn√≠k - IƒåO": "", "Vlastn√≠k - Adresa": "",
        "Vlastn√≠k - Typ osoby": "", "Vlastn√≠k - Pl√°tce DPH": "",
        "Zdrojov√Ω soubor": ""
    }

COLUMNS = list(extract_common_fields().keys())

def extract_data_allianz(text, filename):
    lines = text.splitlines()
    text_lower = text.lower()
    data = extract_common_fields()
    data["Zdrojov√Ω soubor"] = filename

    def search(pattern, group=1):
        match = re.search(pattern, text)
        return match.group(group).strip() if match else ""

    def search_after_line(startswith, offset=1):
        for i, line in enumerate(lines):
            if startswith.lower() in line.lower():
                if i + offset < len(lines):
                    return lines[i + offset].strip()
        return ""

    data["Jm√©no a p≈ô√≠jmen√≠"] = search_after_line("Klient (Vy):")
    data["Rodn√© ƒç√≠slo"] = search(r"Rodn√© ƒç√≠slo:\s*(\d{9,10})")
    rc = data["Rodn√© ƒç√≠slo"]
    if re.match(r"\d{6}", rc):
        rok = int(rc[:2])
        rok += 1900 if rok >= 50 else 2000
        data["Datum narozen√≠"] = f"{rc[4:6]}.{rc[2:4]}.{rok}"

    for i, line in enumerate(lines):
        if "trval√Ω pobyt" in line.lower():
            for j in range(i + 1, i + 3):
                if j < len(lines) and lines[j].strip():
                    data["Adresa"] = lines[j].strip()
                    break
            break

    spz_match = re.search(r"([A-Z0-9]{5,8}), ƒç\.", text)
    if spz_match:
        data["SPZ"] = spz_match.group(1)

    data["ƒå√≠slo smlouvy"] = search(r"Nab√≠dka pojistitele ƒç\.\s*(\d+)")
    data["Cena"] = search(r"Cena poji≈°tƒõn√≠\s+([\d ]+)\s*Kƒå ROƒåNƒö").replace(" ", "")
    data["Poƒç√°tek poji≈°tƒõn√≠"] = search(r"Kƒå ROƒåNƒö\s+(\d{1,2}\.\s*\d{1,2}\.\s*\d{4})")
    data["Roƒçn√≠ n√°jezd"] = search(r"Roƒçn√≠ n√°jezd:\s*(Do\s*[\d\s]+km)")
    data["Telefon"] = search(r"Mobiln√≠ telefon:\s*([\+0-9 ]+)")
    email_match = re.search(r"[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+", text)
    data["E-mail"] = email_match.group(0) if email_match else ""
    data["Kryt√≠ PR"] = "70/70" if "limit 70/70" in text_lower else ""
    data["Shodn√Ω provozovatel"] = "ANO" if "provozovatel je shodn√Ω" in text_lower else "NE"
    data["Shodn√Ω vlastn√≠k"] = "ANO" if "vlastn√≠k vozidla je shodn√Ω" in text_lower else "NE"

    pripojisteni = []
    for kw in ["pr√°vn√≠ poradenstv√≠", "√∫razov√© poji≈°tƒõn√≠"]:
        if f"{kw} ano" in text_lower:
            pripojisteni.append(kw.capitalize())
    data["Dal≈°√≠ p≈ôipoji≈°tƒõn√≠"] = ", ".join(pripojisteni)

    havarijni = ["p≈ô√≠rodn√≠ ud√°losti", "po≈°kozen√≠ zv√≠≈ôetem", "hav√°rie", "gap", "skla", "kr√°de≈æ"]
    data["Havarijn√≠ poji≈°tƒõn√≠"] = "ANO" if any(f"{kw} ano" in text_lower for kw in havarijni) else "NE"
    return data

def extract_data_koop(text, filename):
    data = extract_common_fields()
    data["Zdrojov√Ω soubor"] = filename

    def find(pattern, group=1, default=""):
        match = re.search(pattern, text)
        try:
            return match.group(group).strip()
        except:
            return default

    def find_block(label, group=1):
        return find(rf"{label}\s+([^\n]*)", group)

    lines = text.splitlines()
    data["Jm√©no a p≈ô√≠jmen√≠"] = find_block(r"Titul, jm√©no, p≈ô√≠jmen√≠")
    data["Rodn√© ƒç√≠slo"] = find(r"Rodn√© ƒç√≠slo\s+(\d{9,10})")
    rc = data["Rodn√© ƒç√≠slo"]
    if re.match(r"\d{6}", rc):
        rok = int(rc[:2])
        rok += 1900 if rok >= 50 else 2000
        data["Datum narozen√≠"] = f"{rc[4:6]}.{rc[2:4]}.{rok}"

    data["Adresa"] = find_block(r"Adresa bydli≈°tƒõ")
    data["ƒå√≠slo smlouvy"] = find(r"\b(\d{10})\b")
    data["SPZ"] = find_block(r"Registraƒçn√≠ znaƒçka")
    data["Cena vozidla"] = find(r"Pojistn√° ƒç√°stka\s+([\d\s]+)", 1).replace(" ", "")
    data["Najet√© km"] = find(r"Stav poƒç√≠tadla \(km\)\s+([\d\s]+)", 1).replace(" ", "")
    data["Poƒç√°tek poji≈°tƒõn√≠"] = find(r"Poƒç√°tek poji≈°tƒõn√≠\s+(\d{1,2}\.\s*\d{1,2}\.\s*\d{4})")
    data["Cena"] = find(r"Celkov√© roƒçn√≠ pojistn√©\s+([\d\s]+)", 1).replace(" ", "")
    data["Telefon"] = find(r"Mobil\s+(\d{3} ?\d{3} ?\d{3})")
    email_match = re.search(r"[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+", text)
    data["E-mail"] = email_match.group(0) if email_match else ""
    data["Pojistn√≠k - Typ osoby"] = find(r"Typ osoby\s+([^\n]+)")

    block = re.search(r"Dopl≈àkov√° poji≈°tƒõn√≠(.*?)(?:Roƒçn√≠ pojistn√©|$)", text, re.DOTALL)
    if block:
        items = [r.strip() for r in block.group(1).split("\n") if "poji≈°tƒõn√≠" in r.lower()]
        data["Dal≈°√≠ p≈ôipoji≈°tƒõn√≠"] = ", ".join(sorted(set(items)))

    data["Havarijn√≠ poji≈°tƒõn√≠"] = "ANO" if "Havarijn√≠ poji≈°tƒõn√≠" in text else "NE"
    return data

def extract_data_generali(text, filename):
    data = extract_common_fields()
    data["Zdrojov√Ω soubor"] = filename

    lines = text.splitlines()
    text_lower = text.lower()

    def search(pattern, group=1):
        match = re.search(pattern, text)
        return match.group(group).strip() if match else ""

    data["Jm√©no a p≈ô√≠jmen√≠"] = search(r"Poji≈°tƒõn√Ω:?\s*([A-Z≈†ƒå≈ò≈Ω√Å√âƒö√ç√ù√ö≈Æƒé≈§≈á][^\n]*)")
    data["Rodn√© ƒç√≠slo"] = search(r"Rodn√© ƒç√≠slo:?\s*(\d{9,10})")
    rc = data["Rodn√© ƒç√≠slo"]
    if re.match(r"\d{6}", rc):
        rok = int(rc[:2])
        rok += 1900 if rok >= 50 else 2000
        data["Datum narozen√≠"] = f"{rc[4:6]}.{rc[2:4]}.{rok}"

    data["Adresa"] = search(r"Adresa:?\s*([^\n]+)")
    data["ƒå√≠slo smlouvy"] = search(r"Smlouva ƒç\.:?\s*([\d/]+)")
    data["SPZ"] = search(r"SPZ:?\s*([A-Z0-9]{5,8})")
    data["Cena vozidla"] = search(r"Cena vozidla:?\s*([\d ]+)").replace(" ", "")
    data["Najet√© km"] = search(r"Najet√© km:?\s*([\d ]+)").replace(" ", "")
    data["Roƒçn√≠ n√°jezd"] = search(r"Roƒçn√≠ n√°jezd:?\s*([\d ]+)")
    data["Poƒç√°tek poji≈°tƒõn√≠"] = search(r"Poƒç√°tek poji≈°tƒõn√≠:?\s*(\d{1,2}\.\d{1,2}\.\d{4})")
    data["Cena"] = search(r"Roƒçn√≠ pojistn√©:?\s*([\d ]+)").replace(" ", "")
    data["Telefon"] = search(r"(?:Telefon|Mobil):?\s*([\+0-9 ]+)")
    email_match = re.search(r"[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+", text)
    data["E-mail"] = email_match.group(0) if email_match else ""
    data["Havarijn√≠ poji≈°tƒõn√≠"] = "ANO" if "havarijn√≠ poji≈°tƒõn√≠" in text_lower else "NE"
    pripojisteni = re.findall(r"P≈ôipoji≈°tƒõn√≠:?\s*(.*)", text)
    if pripojisteni:
        data["Dal≈°√≠ p≈ôipoji≈°tƒõn√≠"] = ", ".join(sorted(set(pripojisteni)))
    kryti_match = re.search(r"Limit odpovƒõdnosti:?\s*(\d+\s*mil.*?)\s*/\s*(\d+\s*mil.*?)\s*Kƒç", text)
    if kryti_match:
        data["Kryt√≠ PR"] = f"{kryti_match[1].replace(' ', '')}/{kryti_match[2].replace(' ', '')}"
    return data

class PDFHandler(FileSystemEventHandler):
    def on_created(self, event):
        if event.is_directory or not event.src_path.lower().endswith(".pdf"):
            return

        filename = os.path.basename(event.src_path)
        print(f"\U0001F4E5 Nov√Ω PDF soubor detekov√°n: {filename}")

        try:
            doc = fitz.open(event.src_path)
            text = "".join([page.get_text() for page in doc])
            doc.close()

            if not text.strip():
                print("\U0001F50D Text nenalezen, p≈ôeskoƒçeno.")
                return

            if "generali" in text.lower():
                data = extract_data_generali(text, filename)
            elif "allianz" in text.lower():
                data = extract_data_allianz(text, filename)
            elif "kooperativa" in text.lower():
                data = extract_data_koop(text, filename)
            else:
                print("‚ùå Nepodporovan√° poji≈°≈•ovna ‚Äì p≈ôeskoƒçeno.")
                return

            df_new = pd.DataFrame([[data.get(col, "") for col in COLUMNS]], columns=COLUMNS)

            if os.path.exists(CSV_PATH):
                df_old = pd.read_csv(CSV_PATH)
                df_full = pd.concat([df_old, df_new], ignore_index=True)
            else:
                df_full = df_new

            df_full.to_csv(CSV_PATH, index=False)
            os.rename(event.src_path, os.path.join(SORTED_FOLDER, filename))
            print("‚úÖ Data zaps√°na a soubor p≈ôesunut.")

        except Exception as e:
            print(f"‚ùå Chyba p≈ôi zpracov√°n√≠ {filename}: {e}")
            os.rename(event.src_path, os.path.join(ERROR_FOLDER, filename))

if __name__ == "__main__":
    print("üëÄ Sleduji slo≈æku pro nov√© PDF soubory (Allianz, Kooperativa, Generali)...")
    os.makedirs(SORTED_FOLDER, exist_ok=True)
    os.makedirs(ERROR_FOLDER, exist_ok=True)
    event_handler = PDFHandler()
    observer = Observer()
    observer.schedule(event_handler, WATCH_FOLDER, recursive=False)
    observer.start()
    try:
        while True:
            time.sleep(1)
    except KeyboardInterrupt:
        observer.stop()
    observer.join()